{"version":3,"sources":["components/EmployeeForm/EmployeeForm.js","components/EmployeeList/EmployeeList.js","components/EmployeeTotal/EmployeeTotal.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["emptyEmployeeObject","firstName","lastName","idNumber","jobTitle","annualSalary","EmployeeForm","state","getEmployees","axios","get","then","response","_this","props","dispatch","type","payload","data","catch","error","alert","addEmployee","method","url","handleChange","event","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","clearEmployeeFields","react_default","a","createElement","onSubmit","this","onChange","placeholder","Component","connect","EmployeeList","deleteEmployee","id","concat","_this2","reduxState","employeeReducer","map","employee","key","firstname","lastname","jobtitle","annualsalary","onClick","employeeSalary","sum","Number","_ref","reduce","App","components_EmployeeForm_EmployeeForm","components_EmployeeList_EmployeeList","components_EmployeeTotal_EmployeeTotal","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","storeInstance","createStore","combineReducers","arguments","length","undefined","action","toConsumableArray","employeeToDelete","filter","applyMiddleware","logger","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e7cbd0e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst emptyEmployeeObject = {\n  firstName: '',\n  lastName: '',\n  idNumber: '',\n  jobTitle: '',\n  annualSalary: '',\n};\n\nclass EmployeeForm extends Component {\n  state = emptyEmployeeObject;\n\n  getEmployees = () => {\n    axios.get('/employees')\n    .then( (response) => {\n      // const persons = res.data;\n      this.props.dispatch({type: 'GET_EMPLOYEES', payload: response.data });\n    })\n    .catch( (error) => {\n      alert('Bad stuff happened')\n    })\n  }\n\n  addEmployee = () => {\n    axios({\n      method: 'POST',\n      url: '/employees',\n      data: this.state\n    }).then( (response) => {\n      this.getEmployees();\n    }).catch( (error) => {\n      alert('Error .. bad stuff');\n    })\n    } \n  \n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.dispatch( { type: 'ADD_EMPLOYEE', payload: this.state } )\n    this.clearEmployeeFields();\n    this.getEmployees();\n  }\n\n  clearEmployeeFields = () => {\n    this.setState(emptyEmployeeObject);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input onChange={this.handleChange} placeholder=\"First Name\" value={this.state.firstName} name=\"firstName\" />\n        <input onChange={this.handleChange} placeholder=\"Last Name\" value={this.state.lastName} name=\"lastName\" />\n        <input onChange={this.handleChange} placeholder=\"ID Number\" value={this.state.idNumber} name=\"idNumber\" />\n        <input onChange={this.handleChange} placeholder=\"Job Title\" value={this.state.jobTitle} name=\"jobTitle\" />\n        <input onChange={this.handleChange} placeholder=\"Annual Salary\" value={this.state.annualSalary} name=\"annualSalary\" />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default connect()(EmployeeForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport  axios from 'axios';\n\nconst mapReduxStateToProps = ( reduxState ) => ({ reduxState });\n\nclass EmployeeList extends Component {\n\n  componentDidMount() {\n    this.getEmployees();\n  }\n\n  getEmployees = () => {\n    axios.get('/employees')\n    .then( (response) => {\n      // const persons = res.data;\n      this.props.dispatch({type: 'GET_EMPLOYEES', payload: response.data });\n    })\n    .catch( (error) => {\n      alert('Bad stuff happened')\n    })\n  }\n\n  deleteEmployee = (id) => {\n    // axios call to delete employee\n    axios({\n      method: 'DELETE',\n      url: `/employees/${id}`\n    })\n    .then( (response) => {\n      // const persons = res.data;\n      this.getEmployees();\n    })\n    .catch( (error) => {\n      alert('Bad stuff happened')\n    })\n  }\n\n  // To Do - add delete\n\n//const EmployeeList = ({ employeeList, deleteEmployee }) => (\n  // const EmployeeList = ( props ) => (\n    render() {\n      return (\n        <ul>\n          {this.props.reduxState.employeeReducer.map(employee => (\n            <li key={employee.id}>\n              {`${employee.firstname}\n              ${employee.lastname}\n              is the ${employee.jobtitle}\n              and makes ${employee.annualsalary}`}\n              <button onClick={() => { \n                  this.props.dispatch( { type: 'DELETE_EMPLOYEE', payload: employee } )} \n              }>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n        )\n  }\n}\n\nexport default connect(mapReduxStateToProps)(EmployeeList);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst mapReduxStateToProps = ( reduxState ) => ({ reduxState });\n\nconst employeeSalary = (sum, employee) => sum + Number(employee.annualsalary);\n\nconst calculateMonthlyCost = employeeList => employeeList.reduce(employeeSalary, 0) / 12;\n\nconst EmployeeTotal = ({ reduxState }) => (\n  <p>Total Monthly Cost: {calculateMonthlyCost(reduxState.employeeReducer)}</p>\n);\n\nexport default connect(mapReduxStateToProps)(EmployeeTotal);\n","import React, { Component } from 'react';\nimport EmployeeForm from '../EmployeeForm/EmployeeForm';\nimport EmployeeList from '../EmployeeList/EmployeeList';\nimport EmployeeTotal from '../EmployeeTotal/EmployeeTotal';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <section>\n          <h2>Add Employee</h2>\n          <EmployeeForm />\n        </section>\n        <section>\n          <h2>Employees</h2>\n          <EmployeeList />\n          <EmployeeTotal /> \n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n// import axios from 'axios';\n\nconst employeeReducer = (state=[], action) => {\n  console.log('In employee reducer...');\n  if ( action.type === 'GET_EMPLOYEES' ) {\n    // changing this.\n    state = action.payload\n    // axios.get('/employees')\n    // .then( (response) => {\n    //   // const persons = res.data;\n    //   this.props.dispatch({type: 'SET_EMPLOYEES', payload: response.data });\n    // })\n    // .catch( (error) => {\n    //   alert('Bad stuff happened')\n    // })\n\n  } else if ( action.type === 'ADD_EMPLOYEE' ) {\n    console.log('Handling add of employee!');\n    // Update state - spread out what used to be there, \n    // then add the new one from the action\n    state = [ ...state, action.payload ];\n  } else if ( action.type === 'DELETE_EMPLOYEE' ) {\n    console.log('Handling delete of employee', state, action.payload);\n    const employeeToDelete = action.payload;\n    const matchEmployee = employee => employee.idNumber !== employeeToDelete.idNumber;\n    state = state.filter(matchEmployee);\n  }\n  return state;\n}\n\nconst storeInstance = createStore(\n  combineReducers({\n    employeeReducer\n    // Don't need combine right now, only one\n    // But setup for later & gives us a employeeReducer in reduxState \n  }),\n  applyMiddleware(logger)\n)\n\n\nReactDOM.render(<Provider store={ storeInstance }><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}